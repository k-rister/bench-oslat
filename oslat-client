#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
exec >oslat-client-stderrout.txt
exec 2>&1

. /usr/bin/oslat-base || (echo "/usr/bin/oslat-base not found"; exit 1)

dump_runtime
validate_label
validate_sw_prereqs

if [ -z "${WORKLOAD_CPUS}" ]; then
    exit_error "WORKLOAD_CPUS is not defined.  This must be defined to run oslat"
else
    echo "WORKLOAD_CPUS: ${WORKLOAD_CPUS}"
fi
if [ -z "${HK_CPUS}" ]; then
    exit_error "HK_CPUS is not defined.  This must be defined to run oslat"
else
    echo "HK_CPUS: ${HK_CPUS}"
fi

no_load_balance=0
rtprio_opt=""
duration=60
smt="on"
trace_markers=0
trace_control=0
cpu_main_thread=${HK_CPUS}
cpu_list=${WORKLOAD_CPUS}

opts=$(getopt -q -o "" --longoptions "cpu-list:,cpu-main-thread:,no-load-balance:,rtprio:,duration:,smt:,trace-markers:,trace-control:,bucket-size:,bucket-width:,zero-omit:" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    printf -- "\tUnrecognized option specified\n\n"
    exit 1
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --trace-control)
            shift
            trace_control=$1
            shift
            ;;
        --trace-markers)
            shift
            trace_markers=$1
            shift
            ;;
        --no-load-balance)
            shift
            no_load_balance=$1
            shift
            ;;
        --rtprio)
            shift
            rtprio_opt="--rtprio $1"
            shift
            ;;
        --duration)
            shift
            duration=$1
            shift
            ;;
        --smt)
            shift
            smt=$1
            shift
            ;;
        --cpu-list)
            shift
            cpu_list=$1
            shift
            ;;
        --cpu-main-thread)
            shift
            cpu_main_thread=$1
            shift
            ;;
        --bucket-size)
           shift;
           bucket_size=" --bucket-size $1"
           shift;
           ;;
        --bucket-width)
           shift;
           bucket_width=" --bucket-width $1"
           shift;
           ;;
        --zero-omit)
           shift;
	   if [ "$1" == "yes" ]; then
               zero_omit=" --zero-omit"
	   fi
	   shift;
           ;;
        --)
            shift
            break
            ;;
        *)
            echo "Invalid option: $1"
            exit 1
        esac
done

if [ "$no_load_balance" == "1" ]; then
     disable_balance $cpus_list
fi

# adjust CPUs to use
cpu_str=""
for cpu in $(echo $WORKLOAD_CPUS | sed -e "s/,/ /g"); do
    cpu_str+=" --cpu $cpu"
done
cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${smt} ${cpu_str}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
WORKLOAD_CPUS=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }')
echo "WORKLOAD_CPUS: ${WORKLOAD_CPUS}"

if [[ -n "${cpu_list}" ]]; then
    echo "Overriding WORKLOAD_CPUS: $WORKLOAD_CPUS w/ cpu-list: ${cpu_list}"
    WORKLOAD_CPUS=${cpu_list}
    echo "WORKLOAD_CPUS = $WORKLOAD_CPUS"
fi


cpu_str=""
for cpu in $(echo $HK_CPUS | sed -e "s/,/ /g"); do
    cpu_str+=" --cpu $cpu"
done
cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${smt} ${cpu_str}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
HK_CPUS=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }')
echo "HK_CPUS: ${HK_CPUS}"

if [ -n $cpu_main_thread ]; then
    cpu_str=""
    for cpu in $(echo $cpu_main_thread | sed -e "s/,/ /g"); do
        cpu_str+=" --cpu $cpu"
    done
    # get a comma separated cpu list from cpu-main-thread e.g. 1-3=1,2,3
    cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${smt} ${cpu_str}"
    echo "about to run: ${cmd}"
    CMD_OUTPUT=$(${cmd})
    echo -e "${CMD_OUTPUT}"
    cpu_main_thread=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }')
    echo "cpu_main_thread: ${cpu_main_thread}"

    # remove cpu-main-thread that from the workload cpus
    IFS=',' read -r -a to_remove <<< "$cpu_main_thread"
    # Loop over each element of to_remove and remove from cpu
    for cpu in "${to_remove[@]}"; do
        # Remove the specific number from WORKLOAD_CPUS
        WORKLOAD_CPUS=$(echo "$WORKLOAD_CPUS" | sed "s/\b$cpu\b//g")
    done
    # Clean up (remove leading/trailing commas and consecutive commas)
    WORKLOAD_CPUS=$(echo "$WORKLOAD_CPUS" | sed 's/^,\|,$//g' | sed 's/,,*/,/g')
else
    echo "cpu-main-thread is not defined, using the housekeeping cpus..."
    cpu_main_thread=$(echo ${HK_CPUS} | awk -F, '{ print $1 }')
fi

if [[ -z "$WORKLOAD_CPUS" ]]; then
    echo "Ivalid WORKLOAD_CPUS: $WORKLOAD_CPUS"
    exit 1
fi

echo "cpu-main-thread: ${cpu_main_thread}"
echo "WORKLOAD_CPUS: ${WORKLOAD_CPUS}"

echo
cmd="oslat --help"
echo "About to run: $cmd"
$cmd
echo
cmd="oslat --version"
echo "About to run: $cmd"
$cmd
echo

trace_args=""
if [ "${trace_markers}" == "1" ]; then
    trace_args+=" --trace-markers "
fi
if [ "${trace_control}" == "1" ]; then
    trace_args+=" --trace-control "
fi

output=$(validate_clocksource)
if [ $? != 0 ]; then
    exit_error "${output}"
fi

cmd="taskset -c ${cpu_main_thread},${WORKLOAD_CPUS} oslat \
	--duration ${duration} \
	${rtprio_opt} \
	--cpu-list ${WORKLOAD_CPUS} \
	--cpu-main-thread ${cpu_main_thread} \
	${trace_args} \
	${bucket_size} \
	${bucket_width} \
	${zero_omit}"
echo "About to run: $cmd"
date +%s.%N >begin.txt
$cmd >oslat-bin-stderrout.txt 2>&1
rc=$?
date +%s.%N >end.txt

output=$(validate_clocksource)
if [ $? != 0 ]; then
    exit_error "${output}"
fi

if [ "$no_load_balance" == "1" ]; then
     enable_balance $cpus_list
fi

if [ $rc -gt 0 ]; then
    exit_error "`cat oslat-bin-stderrout.txt`"
fi
