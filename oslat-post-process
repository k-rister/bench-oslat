#!/usr/bin/perl
## -*- mode: perl; indent-tabs-mode: t; perl-indent-level: 4 -*-
## vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl

use strict;
use warnings;
use JSON::XS;
use Data::Dumper;
use Getopt::Long;

BEGIN {
    if (!(exists $ENV{'TOOLBOX_HOME'} && -d "$ENV{'TOOLBOX_HOME'}/perl")) {
    print "This script requires libraries that are provided by the toolbox project.\n";
    print "Toolbox can be acquired from https://github.com/perftool-incubator/toolbox and\n";
    print "then use 'export TOOLBOX_HOME=/path/to/toolbox' so that it can be located.\n";
    exit 1;
    }
}
use lib "$ENV{'TOOLBOX_HOME'}/perl";
use toolbox::json;
use toolbox::cpu;
use toolbox::metrics;

my $ignore;
GetOptions ("runtime=s" => \$ignore,
            "rtprio=s" => \$ignore,
            "no-load-balance" => \$ignore,
            "smt=s" => \$ignore,
            );

my $primary_metric = 'polling-latency-usec';
my %times;
my $metric_data_name;

foreach my $i (qw(begin end)) {
    my $file = $i . ".txt";
    open(FH, $file) || die "Could not open " . $file;
    $times{$i} = int (<FH> * 1000);
    close FH;
}

my $result_file = "oslat-bin-stderrout.txt";
if ( -e $result_file) {
    open(FH, $result_file) || die "Could not open file " . $result_file;
    while (<FH>) {
        #      Maximum:	 75 48 75 48 75 48 75 48 76 51 75 52 75 47 75 48 75 48 75 48 76 47 75 47 75 48 75 48 76 47 75 48 75 48 75 48 75 47 75 48 76 48 75 47 75 48 75 48 75 48 75 48 76 48 75 48 75 48 75 48 75 48 75 48 (us)
        if ( /Maximum:\s+(.*)\(us\)$/ ) {
            my @latencies = split(/\s+/, $1);
            my $system_max_latency = $latencies[0];
            for (my $i = 1; $i < scalar(@latencies); $i++) {
                if ($latencies[$i] > $system_max_latency) {
                    $system_max_latency = $latencies[$i];
                }
            }
            my %desc = ('source' => 'oslat', 'type' => $primary_metric, 'class' => 'count');
            my %names = ();
            my %sample = ('begin' => $times{'begin'}, 'end' => $times{'end'}, 'value' => int $system_max_latency);
            log_sample("0", \%desc, \%names, \%sample);
        }
    }
    $metric_data_name = finish_samples();
    close(FH);
}
# Associate the metrics with a benchmark-period (in this case "measurement")
my %sample;
my @metric_files = ( $metric_data_name );
my @periods;
my %period = ('name' => 'measurement');
$sample{'rickshaw-bench-metric'}{'schema'}{'version'} = "2021.03.02";
$period{'metric-files'} = \@metric_files;
push(@periods, \%period);
$sample{'periods'} = \@periods;
$sample{'primary-period'} = 'measurement';
$sample{'primary-metric'} = $primary_metric;
$sample{'begin'} = $times{'begin'};
$sample{'end'} = $times{'end'};
my $coder = JSON::XS->new;
open(JSON_FH, ">post-process-data.json") ||
    die("Could not open file post-process-data.json for writing\n");
print JSON_FH $coder->encode(\%sample);
close JSON_FH;
